name: Test Local-DNS-Go

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * 1' # Run weekly on Monday at 2 AM
  workflow_dispatch:

jobs:
  test:
    name: Run Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        go-version: [1.21, 1.22]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}
        cache: true

    - name: Verify dependencies
      run: |
        go mod download
        go mod verify

    - name: Run unit tests
      run: |
        go test -v -race -coverprofile=coverage.out ./...

    - name: Run integration tests
      run: |
        go test -v -tags=integration ./test/...

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

  build:
    name: Build and Verify
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        cache: true

    - name: Build application
      run: |
        go build -v -ldflags="-s -w" -o local-dns-go .

    - name: Test binary
      run: |
        ./local-dns-go -version || true
        file local-dns-go

    - name: Create release artifacts
      run: |
        mkdir -p dist
        cp local-dns-go dist/
        tar -czf dist/local-dns-go-linux-amd64.tar.gz local-dns-go
        ls -la dist/

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: local-dns-go-binaries
        path: dist/
        retention-days: 7

  lint:
    name: Lint and Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        cache: true

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m

    - name: Run gosec security scanner
      run: |
        go install github.com/securego/gosec/v2/cmd/gosec@latest
        gosec ./...

    - name: Run staticcheck
      run: |
        go install honnef.co/go/tools/cmd/staticcheck@latest
        staticcheck ./...

  docker:
    name: Build and Test Docker
    runs-on: ubuntu-latest
    needs: [test, lint]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        docker build -t local-dns-go:test .

    - name: Test Docker image
      run: |
        docker run --rm -d --name test-dns -p 5353:53/udp -p 8081:8080 local-dns-go:test
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:8081/health || exit 1
        
        # Test DNS resolution
        dig @localhost -p 5353 google.com +short || exit 1
        
        docker stop test-dns

    - name: Scan Docker image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'local-dns-go:test'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  dns-integration:
    name: DNS Integration Tests
    runs-on: ubuntu-latest
    services:
      dns-server:
        image: local-dns-go:test
        ports:
          - "5353:53/udp"
          - "8081:8080"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Wait for DNS server
      run: |
        until curl -f http://localhost:8081/health; do
          echo "Waiting for DNS server..."
          sleep 5
        done

    - name: Run DNS resolution tests
      run: |
        # Test basic DNS resolution
        dig @localhost -p 5353 google.com A +short
        dig @localhost -p 5353 cloudflare.com A +short
        
        # Test cache functionality
        echo "First query (should cache)"
        time dig @localhost -p 5353 example.com A +short
        echo "Second query (should be faster from cache)"
        time dig @localhost -p 5353 example.com A +short

    - name: Test API endpoints
      run: |
        # Test stats endpoint
        curl -s http://localhost:8081/api/stats | jq .
        
        # Test cache endpoint
        curl -s http://localhost:8081/api/cache | jq .
        
        # Test adding custom route
        curl -X POST http://localhost:8081/api/routes \
          -H "Content-Type: application/json" \
          -d '{"domain":"test.local","type":"A","target":"127.0.0.1","enabled":true}'
        
        # Test custom route resolution
        dig @localhost -p 5353 test.local A +short

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        cache: true

    - name: Run benchmarks
      run: |
        go test -bench=. -benchmem -benchtime=5s ./test/...

    - name: Run load test
      run: |
        go test -bench=BenchmarkDNSPerformance -benchtime=30s -count=3 ./test/

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'local-dns-go'
        path: '.'
        format: 'HTML'
        args: >
          --failOnCVSS 7
          --skipUpdate
          --enableRetired

    - name: Upload dependency check results
      uses: actions/upload-artifact@v4
      with:
        name: dependency-check-report
        path: reports/

  release:
    name: Create Release
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [test, build, lint, docker, performance]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: local-dns-go-binaries
        path: dist/

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/local-dns-go
          dist/local-dns-go-linux-amd64.tar.gz
        generate_release_notes: true
        draft: false
        prerelease: false


